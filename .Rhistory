total.after=c()
for (i in 1:length(a)) {
integrand.before=function(t,mu,b,d,b.sel,d.sel,t.end){#mutations that were acquired before the selected clone started
sel.clone.size.at.t.end=exp((b.sel-d.sel)*(t.end-t.s))
if(sel.clone.size.at.t.end<1){ #selected clone is not present
probability=0
number.mutations=mu*b*exp((b-s)*t)*(pdf(n.max[i],b,d,t.end-t)-pdf(n.min[i],b,d,t.end-t))/log(beta(b,d,t.end-t)) #neutral case, without selected clone
}else{ #selected clone is present
if(n.max[i] < sel.clone.size.at.t.end | n.min[i] > sel.clone.size.at.t.end ){ #the selected clone is bigger than the lower limit of the bin
probability = (pdf(n.max[i] , b, d, t.end-t)-
pdf(n.min[i], b, d, t.end-t))  / log(beta(b, d, t.end-t)) #the mutations within this bin don't come from the selected clone
}else{
probability =(pdf(n.max[i] - sel.clone.size.at.t.end, b, d, t.end-t)-
pdf(max(1,n.min[i] - sel.clone.size.at.t.end), b, d, t.end-t))  / log(beta(b, d, t.end-t)) +pdf(0, b, d, t.end-t)
}
#this is the probability that the mutation we are looking at (the one acquired at time t) is present in sel clone. it is given by
#num: cells present at time t.s that generated from from the mutation we are looking at at time t
#den: all cells that acquired the mutation at time t.s (and generated from time 0)
prob.sel= exp((b-d)*(t.s-t))/(exp((b-d)*t.s))
#at this point the integrand of integral that will give us the future number of mutations, will be given by
#mu*b*exp((b-d)*t): prior to t.s, mutations were acquired according to mu*b*exp((b-d)*t)
#the first part of the parenthesis is given by the product of 2 probabilities: prob(the mutation that appears at time t is NOT present in the selected clone)*prob(that very same mutation grows to a size that is between n.min and n.max)
#the second part of the parenthesis is given by: prob(the mutation that appears at time t is present in the selected clone)*prob(selected clone size+neutral clone grow to a size that is between n.min and n.max)
number.mutations= mu*b*exp((b-d)*t)*((1 - prob.sel)*(pdf(n.max[i], b, d,t.end-t)-pdf(n.min[i], b, d, t.end-t))/log(beta(b, d, t.end - t)) +
(prob.sel) *(probability))
}
}
total.before[i]=integrate(integrand.before, lower=0, upper=t.s, mu, b, d,b.sel,d.sel,t.end)$value
integrand.after=function(t,mu,b,d,b.sel,d.sel,t.end){
#mutations acquire after selected clone was born
#the probability that mutation starts growing from selected clone (which started at time t.s) at time t (the - term is there because we consider the neutral mutations that got "substituted" by the ones in the selected clone)
prob.sel=exp((b.sel-d.sel)*(t-t.s))/(exp((b-d)*t)-exp((b-d)*(t-t.s))+exp((b.sel-d.sel)*(t-t.s)))
#mutation we are looking at (the one that started at time t) did not start growing in selected clone:
#mu*b*exp((b-d)*t):mutations acquired before mutation at time t started
#the second term represents prob(the mutation that appears at time t is NOT present in the selected clone)
#the third term presents prob(that very same mutation grows to a size that is between n.min and n.max during the time interval that goes from t.end to t)
number.mutations.in.neutral=mu*b*(exp((b-d)*t))*(1-prob.sel)*(pdf(n.max[i], b, d, t.end-t)-pdf(n.min[i], b, d, t.end-t))/log(beta(b,d,t.end-t))
#mutation we are looking at (the one that started at time t) started growing in selected clone
#the first term is the mutation accumulation number (given by the sum of the mutations accumulated until time t.s in the neutral cells and the mutations accumulated in selected cells from t.s to time t)
#the second term represents prob(the mutation that appears at time t is present in the selected clone)
#the third term presents prob(that very same mutation grows to a size that is between n.min and n.max in the time interval that goes from t.end to t)
number.mutations.in.sel=mu*b.sel*exp((b.sel-d.sel)*(t-t.s))*(prob.sel)*(pdf(n.max[i], b.sel, d.sel, t.end-t)-pdf(n.min[i],b.sel, d.sel,t.end-t))/log(beta(b.sel,d.sel,t.end-t))
number.mutations=number.mutations.in.neutral + number.mutations.in.sel
}
total.after[i]=integrate(integrand.after, lower=t.s, upper=t.end, mu, b, d,b.sel,d.sel,t.end)$value
}
total.before
plot(1/(a/N), total.before)
n.min <- a[85]
n.min
sel.clone.size.at.t.end=exp((b.sel-d.sel)*(t.end-t.s))
sel.clone.size.at.t.end
sel.size
integrand <- function(t, mu, lambda, delta, n){
p.mut.in.sel <- exp((lambda - delta)*(t.s - t))/exp((lambda - delta)*t.s)
p.mut.in.sel*mu*lambda*exp((lambda - delta)*t)*( density.a.b.exact(lambda, delta, t.end-t, 1, 0) +1/log(.beta(lambda, delta, t.end-t))*(density.a.b.exact(lambda, delta, t.end-t, 1, N*100) -
density.a.b.exact(lambda, delta, t.end-t, 1, n)))
}
## total number of mutations acquired during exponential growth that survived:
res <- integrate(integrand, lower=0, upper=t.s, mu=mu, lambda=lambda, delta=delta, n=max(0,n.min-sel.size))$value
res
integrand <- function(t, mu, lambda, delta, n){
p.mut.in.sel <- exp((lambda - delta)*(t.s - t))/exp((lambda - delta)*t.s)
p.mut.in.sel*mu*lambda*exp((lambda - delta)*t)*( density.a.b.exact(lambda, delta, t.end-t, 1, 0) +1/log(.beta(lambda, delta, t.end-t))*(density.a.b.exact(lambda, delta, t.end-t, 1, 2*n.min) -
density.a.b.exact(lambda, delta, t.end-t, 1, n.min)))
}
n.min
integrate(integrand, lower=0, upper=t.s, mu=mu, lambda=lambda, delta=delta)$value
a[i+1]
a
a[i]
a[85]
n.min
a[86]
n.max <- 133925.6
integrand <- function(t, mu, lambda, delta, n){
p.mut.in.sel <- exp((lambda - delta)*(t.s - t))/exp((lambda - delta)*t.s)
p.mut.in.sel*mu*lambda*exp((lambda - delta)*t)*( density.a.b.exact(lambda, delta, t.end-t, 1, 0) +1/log(.beta(lambda, delta, t.end-t))*(density.a.b.exact(lambda, delta, t.end-t, 1, n.max) -
density.a.b.exact(lambda, delta, t.end-t, 1, n.min)))
}
integrate(integrand, lower=0, upper=t.s, mu=mu, lambda=lambda, delta=delta)$value
i
n.max < sel.clone.size.at.t.end
probability =(pdf(n.max - sel.clone.size.at.t.end, b, d, t.end-t)-
pdf(max(1,n.min - sel.clone.size.at.t.end), b, d, t.end-t))  / log(beta(b, d, t.end-t)) +pdf(0, b, d, t.end-t)
integrand <- function(t, mu, lambda, delta, n){
p.mut.in.sel <- exp((lambda - delta)*(t.s - t))/exp((lambda - delta)*t.s)
p.mut.in.sel*mu*lambda*exp((lambda - delta)*t)*( density.a.b.exact(lambda, delta, t.end-t, 1, 0) +1/log(.beta(lambda, delta, t.end-t))*(density.a.b.exact(lambda, delta, t.end-t, 1, n.max-sel.size) -
density.a.b.exact(lambda, delta, t.end-t, 1, n.min-sel.size)))
}
integrate(integrand, lower=0, upper=t.s, mu=mu, lambda=lambda, delta=delta)$value
integrand <- function(t, mu, lambda, delta, n){
p.mut.in.sel <- exp((lambda - delta)*(t.s - t))/exp((lambda - delta)*t.s)
(1-p.mut.in.sel)*mu*lambda*exp((lambda - delta)*t)/log(.beta(lambda, delta, t.end-t))*(density.a.b.exact(lambda, delta, t.end-t, 1, n) -
density.a.b.exact(lambda, delta, t.end-t, 1, 1))
}
## total number of mutations acquired during exponential growth that survived:
total <- integrate(integrand, lower=0, upper=t.s, mu=mu, lambda=lambda, delta=delta, n=100*N)$value
res <- total - integrate(integrand, lower=0, upper=t.s, mu=mu, lambda=lambda, delta=delta, n=n.min)$value
res
integrate(integrand, lower=0, upper=t.s, mu=mu, lambda=lambda, delta=delta, n=100*N)$value
n.min
integrate(integrand, lower=0, upper=t.s, mu=mu, lambda=lambda, delta=delta, n=n.min)$value
integrand <- function(t, mu, lambda, delta, n){
p.mut.in.sel <- exp((lambda - delta)*(t.s - t))/exp((lambda - delta)*t.s)
(1-p.mut.in.sel)*mu*lambda*exp((lambda - delta)*t)/log(.beta(lambda, delta, t.end-t))*(density.a.b.exact(lambda, delta, t.end-t, 1, 100*N) -
density.a.b.exact(lambda, delta, t.end-t, 1, n.min))
}
## total number of mutations acquired during exponential growth that survived:
total <- integrate(integrand, lower=0, upper=t.s, mu=mu, lambda=lambda, delta=delta, n=n.min)$value
total
## Compute the number of mutations that are present in at least 1 cell and at most n.min cells
## The sum necessary in order to compute the cumulative distribution, is here replaced by integration.
mutations.in.selected.clone.prior.t.s <- sapply(b, function(n.min){
integrand <- function(t, mu, lambda, delta, n){
p.mut.in.sel <- exp((lambda - delta)*(t.s - t))/exp((lambda - delta)*t.s)
p.mut.in.sel*mu*lambda*exp((lambda - delta)*t)*( density.a.b.exact(lambda, delta, t.end-t, 1, 0) +1/log(.beta(lambda, delta, t.end-t))*(density.a.b.exact(lambda, delta, t.end-t, 1, N*100) -
density.a.b.exact(lambda, delta, t.end-t, 1, n)))
}
## total number of mutations acquired during exponential growth that survived:
res <- integrate(integrand, lower=0, upper=t.s, mu=mu, lambda=lambda, delta=delta, n=max(1,n.min-sel.size))$value
return(res)
})
mutations.in.selected.clone.prior.t.s
b
b <- a
b
## Compute the number of mutations that are present in at least 1 cell and at most n.min cells
## The sum necessary in order to compute the cumulative distribution, is here replaced by integration.
mutations.in.selected.clone.prior.t.s <- sapply(b, function(n.min){
integrand <- function(t, mu, lambda, delta, n){
p.mut.in.sel <- exp((lambda - delta)*(t.s - t))/exp((lambda - delta)*t.s)
p.mut.in.sel*mu*lambda*exp((lambda - delta)*t)*( density.a.b.exact(lambda, delta, t.end-t, 1, 0) +1/log(.beta(lambda, delta, t.end-t))*(density.a.b.exact(lambda, delta, t.end-t, 1, N*100) -
density.a.b.exact(lambda, delta, t.end-t, 1, n)))
}
## total number of mutations acquired during exponential growth that survived:
res <- integrate(integrand, lower=0, upper=t.s, mu=mu, lambda=lambda, delta=delta, n=max(1,n.min-sel.size))$value
return(res)
})
mutations.in.selected.clone.prior.t.s
n.min
integrand <- function(t, mu, lambda, delta, n){
p.mut.in.sel <- exp((lambda - delta)*(t.s - t))/exp((lambda - delta)*t.s)
p.mut.in.sel*mu*lambda*exp((lambda - delta)*t)*( density.a.b.exact(lambda, delta, t.end-t, 1, 0) +1/log(.beta(lambda, delta, t.end-t))*(density.a.b.exact(lambda, delta, t.end-t, 1, N*100) -
density.a.b.exact(lambda, delta, t.end-t, 1, n)))
}
## total number of mutations acquired during exponential growth that survived:
res <- integrate(integrand, lower=0, upper=t.s, mu=mu, lambda=lambda, delta=delta, n=max(1,n.min-sel.size))$value
res
max(1,n.min-sel.size)
density.a.b.exact(lambda, delta, t.end, 1, 1)
density.a.b.exact(lambda, delta, t.end, 1, N*100)
log(.beta(lambda, delta, t.end)
)
1/log(.beta(lambda, delta, t.end))*(density.a.b.exact(lambda, delta, t.end, 1, N*100) -
density.a.b.exact(lambda, delta, t.end, 1, 1))
density.a.b.exact(lambda, delta, t.end, 1, 0)
density.a.b.exact(lambda, delta, 0, 1, 0)
density.a.b.exact(lambda, delta, 0.01, 1, 0)
plot(seq(0, t.end), density.a.b.exact(lambda, delta, seq(0, t.end), 1, 0) )
mutations.not.in.selected.clone.prior.t.s <- sapply(b, function(n.min){
integrand <- function(t, mu, lambda, delta, n){
p.mut.in.sel <- exp((lambda - delta)*(t.s - t))/exp((lambda - delta)*t.s)
(1-p.mut.in.sel)*mu*lambda*exp((lambda - delta)*t)/log(.beta(lambda, delta, t.end-t))*(density.a.b.exact(lambda, delta, t.end-t, 1, 100*N) -
density.a.b.exact(lambda, delta, t.end-t, 1, n.min))
}
## total number of mutations acquired during exponential growth that survived:
total <- integrate(integrand, lower=0, upper=t.s, mu=mu, lambda=lambda, delta=delta, n=n.min)$value
return(res)
})
mutations.not.in.selected.clone.prior.t.s
b
mutations.not.in.selected.clone.prior.t.s <- sapply(b, function(n.min){
integrand <- function(t, mu, lambda, delta, n){
p.mut.in.sel <- exp((lambda - delta)*(t.s - t))/exp((lambda - delta)*t.s)
(1-p.mut.in.sel)*mu*lambda*exp((lambda - delta)*t)/log(.beta(lambda, delta, t.end-t))*(density.a.b.exact(lambda, delta, t.end-t, 1, 100*N) -
density.a.b.exact(lambda, delta, t.end-t, 1, n))
}
## total number of mutations acquired during exponential growth that survived:
total <- integrate(integrand, lower=0, upper=t.s, mu=mu, lambda=lambda, delta=delta, n=n.min)$value
return(res)
})
mutations.not.in.selected.clone.prior.t.s
source("~/Nextcloud/Hematopoiesis/Blood_oxford/RScripts/Drift_and_selection/R/Clone_size_distribution.R")
mutations.not.in.selected.clone.prior.t.s <- sapply(b, function(n.min){
integrand <- function(t, mu, lambda, delta, n){
p.mut.in.sel <- exp((lambda - delta)*(t.s - t))/exp((lambda - delta)*t.s)
(1-p.mut.in.sel)*mu*lambda*exp((lambda - delta)*t)/log(.beta(lambda, delta, t.end-t))*(density.a.b.exact(lambda, delta, t.end-t, 1, 100*N) -
density.a.b.exact(lambda, delta, t.end-t, 1, n))
}
## total number of mutations acquired during exponential growth that survived:
total <- integrate(integrand, lower=0, upper=t.s, mu=mu, lambda=lambda, delta=delta, n=n.min)$value
return(res)
})
mutations.not.in.selected.clone.prior.t.s
integrand <- function(t, mu, lambda, delta, n){
p.mut.in.sel <- exp((lambda - delta)*(t.s - t))/exp((lambda - delta)*t.s)
(1-p.mut.in.sel)*mu*lambda*exp((lambda - delta)*t)/log(.beta(lambda, delta, t.end-t))*(density.a.b.exact(lambda, delta, t.end-t, 1, 100*N) -
density.a.b.exact(lambda, delta, t.end-t, 1, n))
}
## total number of mutations acquired during exponential growth that survived:
total <- integrate(integrand, lower=0, upper=t.s, mu=mu, lambda=lambda, delta=delta, n=n.min)$value
mutations.not.in.selected.clone.prior.t.s <- sapply(b, function(n.min){
integrand <- function(t, mu, lambda, delta, n){
p.mut.in.sel <- exp((lambda - delta)*(t.s - t))/exp((lambda - delta)*t.s)
(1-p.mut.in.sel)*mu*lambda*exp((lambda - delta)*t)/log(.beta(lambda, delta, t.end-t))*(density.a.b.exact(lambda, delta, t.end-t, 1, 100*N) -
density.a.b.exact(lambda, delta, t.end-t, 1, n))
}
## total number of mutations acquired during exponential growth that survived:
res <- integrate(integrand, lower=0, upper=t.s, mu=mu, lambda=lambda, delta=delta, n=n.min)$value
return(res)
})
mutations.not.in.selected.clone.prior.t.s
## Compute the number of mutations that are present in at least 1 cell and at most n.min cells
## The sum necessary in order to compute the cumulative distribution, is here replaced by integration.
mutations.in.selected.clone.prior.t.s <- sapply(b, function(n.min){
integrand <- function(t, mu, lambda, delta, n){
p.mut.in.sel <- exp((lambda - delta)*(t.s - t))/exp((lambda - delta)*t.s)
p.mut.in.sel*mu*lambda*exp((lambda - delta)*t)*( density.a.b.exact(lambda, delta, t.end-t, 1, 0) +1/log(.beta(lambda, delta, t.end-t))*(density.a.b.exact(lambda, delta, t.end-t, 1, N*100) -
density.a.b.exact(lambda, delta, t.end-t, 1, n)))
}
## total number of mutations acquired during exponential growth that survived:
res <- integrate(integrand, lower=0, upper=t.s, mu=mu, lambda=lambda, delta=delta, n=max(1,n.min-sel.size))$value
return(res)
})
mutations.in.selected.clone.prior.t.s
t.s
mu
p.mut.in.sel*mu*lambda*exp((lambda - delta)*t)*( -density.a.b.exact(lambda, delta, t.end-t, 1, 0) +1/log(.beta(lambda, delta, t.end-t))*(density.a.b.exact(lambda, delta, t.end-t, 1, N*100) -
density.a.b.exact(lambda, delta, t.end-t, 1, n)))
integrand <- function(t, mu, lambda, delta, n){
p.mut.in.sel <- exp((lambda - delta)*(t.s - t))/exp((lambda - delta)*t.s)
p.mut.in.sel*mu*lambda*exp((lambda - delta)*t)*( -density.a.b.exact(lambda, delta, t.end-t, 1, 0) +1/log(.beta(lambda, delta, t.end-t))*(density.a.b.exact(lambda, delta, t.end-t, 1, N*100) -
density.a.b.exact(lambda, delta, t.end-t, 1, n)))
}
p.mut.in.sel*mu*lambda*exp((lambda - delta)*t)*( -density.a.b.exact(lambda, delta, t.end-t, 1, 0) +1/log(.beta(lambda, delta, t.end-t))*(density.a.b.exact(lambda, delta, t.end-t, 1, N*100) -
density.a.b.exact(lambda, delta, t.end-t, 1, n)))
## Compute the number of mutations that are present in at least 1 cell and at most n.min cells
## The sum necessary in order to compute the cumulative distribution, is here replaced by integration.
mutations.in.selected.clone.prior.t.s <- sapply(b, function(n.min){
integrand <- function(t, mu, lambda, delta, n){
p.mut.in.sel <- exp((lambda - delta)*(t.s - t))/exp((lambda - delta)*t.s)
p.mut.in.sel*mu*lambda*exp((lambda - delta)*t)*( -density.a.b.exact(lambda, delta, t.end-t, 1, 0) +1/log(.beta(lambda, delta, t.end-t))*(density.a.b.exact(lambda, delta, t.end-t, 1, N*100) -
density.a.b.exact(lambda, delta, t.end-t, 1, n)))
}
## total number of mutations acquired during exponential growth that survived:
res <- integrate(integrand, lower=0, upper=t.s, mu=mu, lambda=lambda, delta=delta, n=max(1,n.min-sel.size))$value
return(res)
})
mutations.not.in.selected.clone.prior.t.s <- sapply(b, function(n.min){
integrand <- function(t, mu, lambda, delta, n){
p.mut.in.sel <- exp((lambda - delta)*(t.s - t))/exp((lambda - delta)*t.s)
(1-p.mut.in.sel)*mu*lambda*exp((lambda - delta)*t)/log(.beta(lambda, delta, t.end-t))*(density.a.b.exact(lambda, delta, t.end-t, 1, 100*N) -
density.a.b.exact(lambda, delta, t.end-t, 1, n))
}
## total number of mutations acquired during exponential growth that survived:
res <- integrate(integrand, lower=0, upper=t.s, mu=mu, lambda=lambda, delta=delta, n=n.min)$value
return(res)
})
res
integrand <- function(t, mu, lambda, delta, n){
p.mut.in.sel <- exp((lambda - delta)*(t.s - t))/exp((lambda - delta)*t.s)
p.mut.in.sel*mu*lambda*exp((lambda - delta)*t)*( -density.a.b.exact(lambda, delta, t.end-t, 1, 0) +1/log(.beta(lambda, delta, t.end-t))*(density.a.b.exact(lambda, delta, t.end-t, 1, N*100) -
density.a.b.exact(lambda, delta, t.end-t, 1, n)))
}
## total number of mutations acquired during exponential growth that survived:
res <- integrate(integrand, lower=0, upper=t.s, mu=mu, lambda=lambda, delta=delta, n=max(1,n.min-sel.size))$value
res
pdf
N*100
integrand <- function(t, mu, lambda, delta, n){
p.mut.in.sel <- exp((lambda - delta)*(t.s - t))/exp((lambda - delta)*t.s)
p.mut.in.sel*mu*lambda*exp((lambda - delta)*t)*( density.a.b.exact(lambda, delta, t.end-t, 1, 0) +1/log(.beta(lambda, delta, t.end-t))*(density.a.b.exact(lambda, delta, t.end-t, 1, (n.min-sel.size)*10) -
density.a.b.exact(lambda, delta, t.end-t, 1, n)))
}
## total number of mutations acquired during exponential growth that survived:
res <- integrate(integrand, lower=0, upper=t.s, mu=mu, lambda=lambda, delta=delta, n=max(1,n.min-sel.size))$value
res
n.min - sel.size
integrand <- function(t, mu, lambda, delta, n){
p.mut.in.sel <- exp((lambda - delta)*(t.s - t))/exp((lambda - delta)*t.s)
p.mut.in.sel*mu*lambda*exp((lambda - delta)*t)*( density.a.b.exact(lambda, delta, t.end-t, 1, 0) +1/log(.beta(lambda, delta, t.end-t))*(density.a.b.exact(lambda, delta, t.end-t, 1, 0) -
density.a.b.exact(lambda, delta, t.end-t, 1, n)))
}
## total number of mutations acquired during exponential growth that survived:
res <- integrate(integrand, lower=0, upper=t.s, mu=mu, lambda=lambda, delta=delta, n=max(1,n.min-sel.size))$value
res
## Compute the number of mutations that are present in at least 1 cell and at most n.min cells
## The sum necessary in order to compute the cumulative distribution, is here replaced by integration.
mutations.in.selected.clone.prior.t.s <- sapply(b, function(n.min){
integrand <- function(t, mu, lambda, delta, n){
p.mut.in.sel <- exp((lambda - delta)*(t.s - t))/exp((lambda - delta)*t.s)
p.mut.in.sel*mu*lambda*exp((lambda - delta)*t)*( density.a.b.exact(lambda, delta, t.end-t, 1, 0) +(density.a.b.exact(lambda, delta, t.end-t, 1, N*100) -
density.a.b.exact(lambda, delta, t.end-t, 1, n))/log(.beta(lambda, delta, t.end-t)))
}
## total number of mutations acquired during exponential growth that survived:
res <- integrate(integrand, lower=0, upper=t.s, mu=mu, lambda=lambda, delta=delta, n=max(1,n.min-sel.size))$value
return(res)
})
mutations.not.in.selected.clone.prior.t.s <- sapply(b, function(n.min){
integrand <- function(t, mu, lambda, delta, n){
p.mut.in.sel <- exp((lambda - delta)*(t.s - t))/exp((lambda - delta)*t.s)
(1-p.mut.in.sel)*mu*lambda*exp((lambda - delta)*t)/log(.beta(lambda, delta, t.end-t))*(density.a.b.exact(lambda, delta, t.end-t, 1, 100*N) -
density.a.b.exact(lambda, delta, t.end-t, 1, n))
}
## total number of mutations acquired during exponential growth that survived:
res <- integrate(integrand, lower=0, upper=t.s, mu=mu, lambda=lambda, delta=delta, n=n.min)$value
return(res)
})
mutations.not.in.selected.clone.prior.t.s
mutations.in.selected.clone.prior.t.s
## Compute the number of mutations that are present in at least 1 cell and at most n.min cells
## The sum necessary in order to compute the cumulative distribution, is here replaced by integration.
mutations.in.selected.clone.prior.t.s <- sapply(b, function(n.min){
integrand <- function(t, mu, lambda, delta, n){
p.mut.in.sel <- exp((lambda - delta)*(t.s - t))/exp((lambda - delta)*t.s)
p.mut.in.sel*mu*lambda*exp((lambda - delta)*t)*( density.a.b.exact(lambda, delta, t.end-t, 1, 0) +(density.a.b.exact(lambda, delta, t.end-t, 1, N*100) -
density.a.b.exact(lambda, delta, t.end-t, 1, n))/log(.beta(lambda, delta, t.end-t)))
}
## total number of mutations acquired during exponential growth that survived:
res <- integrate(integrand, lower=0, upper=t.s, mu=mu, lambda=lambda, delta=delta, n=max(1,n.min-sel.size))$value
return(res)
})
mutations.in.selected.clone.prior.t.s
b <- 1
i
i <- 85
n.min=a
n.max=higher.a
integrand.before=function(t,mu,b,d,b.sel,d.sel,t.end){#mutations that were acquired before the selected clone started
sel.clone.size.at.t.end=exp((b.sel-d.sel)*(t.end-t.s))
if(sel.clone.size.at.t.end<1){ #selected clone is not present
probability=0
number.mutations=mu*b*exp((b-s)*t)*(pdf(n.max[i],b,d,t.end-t)-pdf(n.min[i],b,d,t.end-t))/log(beta(b,d,t.end-t)) #neutral case, without selected clone
}else{ #selected clone is present
if(n.max[i] < sel.clone.size.at.t.end | n.min[i] > sel.clone.size.at.t.end ){ #the selected clone is bigger than the lower limit of the bin
probability = (pdf(n.max[i] , b, d, t.end-t)-
pdf(n.min[i], b, d, t.end-t))  / log(beta(b, d, t.end-t)) #the mutations within this bin don't come from the selected clone
}else{
probability =(pdf(n.max[i] - sel.clone.size.at.t.end, b, d, t.end-t)-
pdf(max(1,n.min[i] - sel.clone.size.at.t.end), b, d, t.end-t))  / log(beta(b, d, t.end-t)) +pdf(0, b, d, t.end-t)
}
#this is the probability that the mutation we are looking at (the one acquired at time t) is present in sel clone. it is given by
#num: cells present at time t.s that generated from from the mutation we are looking at at time t
#den: all cells that acquired the mutation at time t.s (and generated from time 0)
prob.sel= exp((b-d)*(t.s-t))/(exp((b-d)*t.s))
#at this point the integrand of integral that will give us the future number of mutations, will be given by
#mu*b*exp((b-d)*t): prior to t.s, mutations were acquired according to mu*b*exp((b-d)*t)
#the first part of the parenthesis is given by the product of 2 probabilities: prob(the mutation that appears at time t is NOT present in the selected clone)*prob(that very same mutation grows to a size that is between n.min and n.max)
#the second part of the parenthesis is given by: prob(the mutation that appears at time t is present in the selected clone)*prob(selected clone size+neutral clone grow to a size that is between n.min and n.max)
number.mutations= mu*b*exp((b-d)*t)*((1 - prob.sel)*(pdf(n.max[i], b, d,t.end-t)-pdf(n.min[i], b, d, t.end-t))/log(beta(b, d, t.end - t)) +
(prob.sel) *(probability))
}
}
integrate(integrand.before, lower=0, upper=t.s, mu, b, d,b.sel,d.sel,t.end)$value
integrand.before=function(t,mu,b,d,b.sel,d.sel,t.end){#mutations that were acquired before the selected clone started
sel.clone.size.at.t.end=exp((b.sel-d.sel)*(t.end-t.s))
if(sel.clone.size.at.t.end<1){ #selected clone is not present
probability=0
number.mutations=mu*b*exp((b-s)*t)*(pdf(n.max[i],b,d,t.end-t)-pdf(n.min[i],b,d,t.end-t))/log(beta(b,d,t.end-t)) #neutral case, without selected clone
}else{ #selected clone is present
if(n.max[i] < sel.clone.size.at.t.end | n.min[i] > sel.clone.size.at.t.end ){ #the selected clone is bigger than the lower limit of the bin
probability = (pdf(n.max[i] , b, d, t.end-t)-
pdf(n.min[i], b, d, t.end-t))  / log(beta(b, d, t.end-t)) #the mutations within this bin don't come from the selected clone
}else{
probability =(pdf(n.max[i] - sel.clone.size.at.t.end, b, d, t.end-t)-
pdf(max(1,n.min[i] - sel.clone.size.at.t.end), b, d, t.end-t))  / log(beta(b, d, t.end-t)) +pdf(0, b, d, t.end-t)
}
#this is the probability that the mutation we are looking at (the one acquired at time t) is present in sel clone. it is given by
#num: cells present at time t.s that generated from from the mutation we are looking at at time t
#den: all cells that acquired the mutation at time t.s (and generated from time 0)
prob.sel= exp((b-d)*(t.s-t))/(exp((b-d)*t.s))
#at this point the integrand of integral that will give us the future number of mutations, will be given by
#mu*b*exp((b-d)*t): prior to t.s, mutations were acquired according to mu*b*exp((b-d)*t)
#the first part of the parenthesis is given by the product of 2 probabilities: prob(the mutation that appears at time t is NOT present in the selected clone)*prob(that very same mutation grows to a size that is between n.min and n.max)
#the second part of the parenthesis is given by: prob(the mutation that appears at time t is present in the selected clone)*prob(selected clone size+neutral clone grow to a size that is between n.min and n.max)
number.mutations= mu*b*exp((b-d)*t)*#((1 - prob.sel)*(pdf(n.max[i], b, d,t.end-t)-pdf(n.min[i], b, d, t.end-t))/log(beta(b, d, t.end - t)) +
(prob.sel) *(probability))
integrand.before=function(t,mu,b,d,b.sel,d.sel,t.end){#mutations that were acquired before the selected clone started
sel.clone.size.at.t.end=exp((b.sel-d.sel)*(t.end-t.s))
if(sel.clone.size.at.t.end<1){ #selected clone is not present
probability=0
number.mutations=mu*b*exp((b-s)*t)*(pdf(n.max[i],b,d,t.end-t)-pdf(n.min[i],b,d,t.end-t))/log(beta(b,d,t.end-t)) #neutral case, without selected clone
}else{ #selected clone is present
if(n.max[i] < sel.clone.size.at.t.end | n.min[i] > sel.clone.size.at.t.end ){ #the selected clone is bigger than the lower limit of the bin
probability = (pdf(n.max[i] , b, d, t.end-t)-
pdf(n.min[i], b, d, t.end-t))  / log(beta(b, d, t.end-t)) #the mutations within this bin don't come from the selected clone
}else{
probability =(pdf(n.max[i] - sel.clone.size.at.t.end, b, d, t.end-t)-
pdf(max(1,n.min[i] - sel.clone.size.at.t.end), b, d, t.end-t))  / log(beta(b, d, t.end-t)) +pdf(0, b, d, t.end-t)
}
#this is the probability that the mutation we are looking at (the one acquired at time t) is present in sel clone. it is given by
#num: cells present at time t.s that generated from from the mutation we are looking at at time t
#den: all cells that acquired the mutation at time t.s (and generated from time 0)
prob.sel= exp((b-d)*(t.s-t))/(exp((b-d)*t.s))
#at this point the integrand of integral that will give us the future number of mutations, will be given by
#mu*b*exp((b-d)*t): prior to t.s, mutations were acquired according to mu*b*exp((b-d)*t)
#the first part of the parenthesis is given by the product of 2 probabilities: prob(the mutation that appears at time t is NOT present in the selected clone)*prob(that very same mutation grows to a size that is between n.min and n.max)
#the second part of the parenthesis is given by: prob(the mutation that appears at time t is present in the selected clone)*prob(selected clone size+neutral clone grow to a size that is between n.min and n.max)
number.mutations= mu*b*exp((b-d)*t)*#((1 - prob.sel)*(pdf(n.max[i], b, d,t.end-t)-pdf(n.min[i], b, d, t.end-t))/log(beta(b, d, t.end - t)) +
(prob.sel) *(probability)
}
}
integrate(integrand.before, lower=0, upper=t.s, mu, b, d,b.sel,d.sel,t.end)$value
n.max
n.min
n.min[i]
pdf(n.max[i]-sel.clone.size.at.t.end, b, d, t.end-t)
pdf(n.max[i]-sel.clone.size.at.t.end, b, d, t.end)
density.a.b.exact(lambda, delta, t.end, 1, n.max[i]-sel.clone.size.at.t.end)
pdf(100*N, b, d, t.end)
integrand.before=function(t,mu,b,d,b.sel,d.sel,t.end){#mutations that were acquired before the selected clone started
sel.clone.size.at.t.end=exp((b.sel-d.sel)*(t.end-t.s))
if(sel.clone.size.at.t.end<1){ #selected clone is not present
probability=0
number.mutations=mu*b*exp((b-s)*t)*(pdf(n.max[i],b,d,t.end-t)-pdf(n.min[i],b,d,t.end-t))/log(beta(b,d,t.end-t)) #neutral case, without selected clone
}else{ #selected clone is present
if(n.max[i] < sel.clone.size.at.t.end | n.min[i] > sel.clone.size.at.t.end ){ #the selected clone is bigger than the lower limit of the bin
probability = (pdf(n.max[i] , b, d, t.end-t)-
pdf(n.min[i], b, d, t.end-t))  / log(beta(b, d, t.end-t)) #the mutations within this bin don't come from the selected clone
}else{
probability =(pdf(100*N b, d, t.end-t)-
source("~/.active-rstudio-document")
integrate(integrand.before, lower=0, upper=t.s, mu, b, d,b.sel,d.sel,t.end)$value
mu*lambda*exp((lambda - delta)*100)
mu*b*exp((b-d)*100)
source("~/.active-rstudio-document")
integrate(integrand.before, lower=0, upper=t.s, mu, b, d,b.sel,d.sel,t.end)$value
integrand <- function(t, mu, lambda, delta, n){
p.mut.in.sel <- exp((lambda - delta)*(t.s - t))/exp((lambda - delta)*t.s)
( density.a.b.exact(lambda, delta, t.end-t, 1, 0) +(density.a.b.exact(lambda, delta, t.end-t, 1, N*100) -
density.a.b.exact(lambda, delta, t.end-t, 1, n))/log(.beta(lambda, delta, t.end-t)))
}
integrate(integrand, lower=0, upper=t.s, mu=mu, lambda=lambda, delta=delta, n=max(1,n.min-sel.size))$value
integrand <- function(t, mu, lambda, delta, n){
p.mut.in.sel <- exp((lambda - delta)*(t.s - t))/exp((lambda - delta)*t.s)
( pdf(0, lambda, delta, t.end-t) +(density.a.b.exact(lambda, delta, t.end-t, 1, N*100) -
density.a.b.exact(lambda, delta, t.end-t, 1, n))/log(.beta(lambda, delta, t.end-t)))
}
integrate(integrand, lower=0, upper=t.s, mu=mu, lambda=lambda, delta=delta, n=max(1,n.min-sel.size))$value
.alpha
alpha
alpha(lambda, delta, 10)
.alpha(lambda, delta, 10)
pdf
beta(lambda, delta, 10)
.beta(lambda, delta, 10)
integrand <- function(t, mu, lambda, delta, n){
p.mut.in.sel <- exp((lambda - delta)*(t.s - t))/exp((lambda - delta)*t.s)
( pdf(0, lambda, delta, t.end-t) +(density.a.b.exact(lambda, delta, t.end-t, 1, N*100) -
density.a.b.exact(lambda, delta, t.end-t, 1, n))/log(.beta(lambda, delta, t.end-t)))
}
.alpha(lambda, delta, 10)
density.a.b.exact
density.a.b.exact(lambda, delta, 10, 1, 0)
.alpha(lambda, delta, 10)
source("~/Nextcloud/Hematopoiesis/Blood_oxford/RScripts/Drift_and_selection/R/Clone_size_distribution.R")
## final tissue size
N <- exp((lambda - delta)*t.end) - exp((lambda - delta)*(t.end - t.s)) + exp((lambda - delta*s)*(t.end - t.s))
## size of the selected clone at t.end
sel.size <- exp((lambda - s*delta)*(t.end-t.s))
## Compute the number of mutations that are present in at least 1 cell and at most n.min cells
## The sum necessary in order to compute the cumulative distribution, is here replaced by integration.
mutations.in.selected.clone.prior.t.s <- sapply(b, function(n.min){
integrand <- function(t, mu, lambda, delta, n){
p.mut.in.sel <- exp((lambda - delta)*(t.s - t))/exp((lambda - delta)*t.s)
p.mut.in.sel*mu*lambda*exp((lambda - delta)*t)*( density.a.b.exact(lambda, delta, t.end-t, 1, 0) +(density.a.b.exact(lambda, delta, t.end-t, 1, N*100) -
density.a.b.exact(lambda, delta, t.end-t, 1, n))/log(.beta(lambda, delta, t.end-t)))
}
## total number of mutations acquired during exponential growth that survived:
res <- integrate(integrand, lower=0, upper=t.s, mu=mu, lambda=lambda, delta=delta, n=max(1,n.min-sel.size))$value
return(res)
})
mutations.in.selected.clone.prior.t.s
b <- a
## Compute the number of mutations that are present in at least 1 cell and at most n.min cells
## The sum necessary in order to compute the cumulative distribution, is here replaced by integration.
mutations.in.selected.clone.prior.t.s <- sapply(b, function(n.min){
integrand <- function(t, mu, lambda, delta, n){
p.mut.in.sel <- exp((lambda - delta)*(t.s - t))/exp((lambda - delta)*t.s)
p.mut.in.sel*mu*lambda*exp((lambda - delta)*t)*( density.a.b.exact(lambda, delta, t.end-t, 1, 0) +(density.a.b.exact(lambda, delta, t.end-t, 1, N*100) -
density.a.b.exact(lambda, delta, t.end-t, 1, n))/log(.beta(lambda, delta, t.end-t)))
}
## total number of mutations acquired during exponential growth that survived:
res <- integrate(integrand, lower=0, upper=t.s, mu=mu, lambda=lambda, delta=delta, n=max(1,n.min-sel.size))$value
return(res)
})
mutations.in.selected.clone.prior.t.s
mutations.not.in.selected.clone.prior.t.s <- sapply(b, function(n.min){
integrand <- function(t, mu, lambda, delta, n){
p.mut.in.sel <- exp((lambda - delta)*(t.s - t))/exp((lambda - delta)*t.s)
(1-p.mut.in.sel)*mu*lambda*exp((lambda - delta)*t)/log(.beta(lambda, delta, t.end-t))*(density.a.b.exact(lambda, delta, t.end-t, 1, 100*N) -
density.a.b.exact(lambda, delta, t.end-t, 1, n))
}
## total number of mutations acquired during exponential growth that survived:
res <- integrate(integrand, lower=0, upper=t.s, mu=mu, lambda=lambda, delta=delta, n=n.min)$value
return(res)
})
mutations.not.in.selected.clone.prior.t.s
library(roxygen2)
roxygenise()
library(devtools)
install_github("VerenaK90/Drift_and_selection", auth_token = "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")
library(DriftAndSelection)
p.a.b()
p.a.b
density.a.b.exact
.alpha
library(roxygen2)
roxygenise()
library(roxygen2)
roxygenise()
